package timedodge;
import javafx.animation.AnimationTimer;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.util.Duration;
import javafx.stage.Stage;

public class Main extends Application {
	static int dx_obstacle = 1;
	public static void main(String[] args) {
		launch(args);
	}
	@Override
	public void start(Stage theStage) {
		theStage.setTitle("TimeDodge ALPHA");
		Group root = new Group();
		Scene scene = new Scene(root, 800, 800);
		theStage.setScene(scene);
		theStage.centerOnScreen();
		theStage.setResizable(false);
		loadmap_zanakz(scene, 400, 400);
		theStage.show();
		
	}
	@SuppressWarnings("unused")
	private void loadmap_zanakz(final Scene scene, int x, int y) {
		Circle obstacle = new Circle(400, 400,  5);
		obstacle.setFill(Color.GRAY);
		obstacle.setStroke(Color.BLANCHEDALMOND);
		
		final Group root = (Group) scene.getRoot();
		root.getChildren().add(obstacle);
		Timeline t = new Timeline();
		t.setCycleCount(Animation.INDEFINITE);
		KeyFrame moveObstacle = new KeyFrame(Duration.seconds(0.002), 
				new EventHandler<ActionEvent>() {
			public void handle(ActionEvent e) {
				if(x < obstacle.getTranslateX() && ((obstacle.getTranslateX() - x) > 200)) {
					dx_obstacle = dx_obstacle * -1;
				}
				else if(x > obstacle.getTranslateX() && ((x - obstacle.getTranslateX()) > 200)) {
					//dx_obstacle = dx_obstacle * -1;
				}
				obstacle.setTranslateX(obstacle.getTranslateX() + dx_obstacle);
					
				
			}
		});
		t.getKeyFrames().add(moveObstacle);
		t.play();
		
		
	}
}
